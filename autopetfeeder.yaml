esphome:
  name: autopetfeeder
  friendly_name: autopetfeeder
  includes:
    - mcu8833.h     
  on_shutdown: 
    then: 
      - lambda: |- 
          if(id(cover_status == 0)) {
            auto call1 = id(my_fan).turn_on();
            id(my_fan).direction = FanDirection::FORWARD; 
            call1.perform();
          }
      - delay: 0.15s 
      - lambda: |- 
          if(id(cover_status == 0)) {
            auto call2 = id(my_fan).turn_off();
            call2.perform(); 
            id(cover_status) = 1;
          }
    
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0 

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_password

ota:
  password: !secret ota_password 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.0.88
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.0.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Autopetfeeder Fallback Hotspot"
    password: !secret hotspot_password

captive_portal:
    
uart:
  id: uart_bus
  tx_pin: GPIO21  # D6
  rx_pin: GPIO20  # D7
  baud_rate: 9600
  rx_buffer_size: 128

deep_sleep:
  id: deep_sleep_1
  run_duration: 
    default: 60s
    gpio_wakeup_reason: 15s
  wakeup_pin_mode: 
    IGNORE 
  sleep_duration: 1440min  # cannot omit 
  wakeup_pin: GPIO4
  #wakeup_pin_mode: INVERT_WAKEUP

switch:
  - platform: shutdown
    id: shutdown_switch
    name: "autopetfeeder shutdown"

globals:
- id: somebody_count
  type: int 
  initial_value: "0" 
- id: cover_status
  type: int 
  initial_value: "0"   

sensor:
  - platform: custom
    lambda: |-
      auto mcu8833 = new MCU8833Component(id(uart_bus));
      App.register_component(mcu8833);
      return {mcu8833->max_temperature, mcu8833->min_temperature, mcu8833->avg_temperature, mcu8833->min_index, mcu8833->max_index};
    sensors:
      - name: "Thermal Max"
        id: thermal_max 
        unit_of_measurement: °C
        device_class: temperature
        accuracy_decimals: 2
      - name: "Thermal Min"
        id: thermal_min 
        unit_of_measurement: °C
        device_class: temperature
        accuracy_decimals: 2
      - name: "Thermal Avg"
        id: thermal_avg
        unit_of_measurement: °C
        device_class: temperature
        accuracy_decimals: 2
      - name: "Thermal Min Index"
        accuracy_decimals: 0
      - name: "Thermal Max Index"
        accuracy_decimals: 0
  - platform: adc
    pin: GPIO2 # D0 
    name: "autopetfeeder"
    raw: true 
    attenuation: 11dB
    update_interval: 2s    
    filters:
      - skip_initial: 3
      - delta: 0.2
      - multiply: 0.0014652014652015  
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12
    on_value_range:
      - below: 3.4
        then: 
          - switch.turn_on: shutdown_switch      
  - platform: template 
    name: "coveropen timeout"
    lambda: |-
      static long thermal_count = 0;  
      static long pir_count = 0; 

      if(id(pir_sensor).state == 1) {
        pir_count = 60; 
      } else {
        pir_count--; 
      }

      ESP_LOGD("lambda", "pir count %d", pir_count);  

      // all magic number should be changed for each environment. 
      // body temperature > 19°C and maximum - average temperature > 6°C and movement within 30 seconds 
      if(id(thermal_max).state > 19 && id(thermal_max).state - id(thermal_avg).state > 6 && pir_count > 30) {
        thermal_count = 60;
      } else {
        thermal_count--;
      }

      if(thermal_count == 60 && id(cover_status) == 0) { 
        id(cover_status) = 1;

        auto call = id(my_cover).make_call();
        call.set_command_open();
        call.perform();        
      }

      if((thermal_count == 0 || pir_count < 0) && id(cover_status) == 1) { 
        id(cover_status) = 0;    

        auto call = id(my_cover).make_call();
        call.set_command_close();
        call.perform(); 
      }

      return thermal_count; 
    update_interval: 1s 

binary_sensor:
  - platform: gpio
    pin: GPIO4
    name: "PIR Sensor"
    id: pir_sensor 
    device_class: motion          
  - platform: template 
    name: "cover status"
    lambda: |- 
      if(id(cover_status) == 0) {
        return false; 
      } else {
        return true; 
      }    

output:
  - platform: ledc
    id: motor_forward_pin
    pin: GPIO9 
  - platform: ledc
    id: motor_reverse_pin
    pin: GPIO8 
  - platform: ledc 
    id: motor_enable 
    pin: GPIO10
  - platform: ledc
    pin: GPIO5
    id: gpio_d5    

light:
  - platform: monochromatic
    output: gpio_d5
    id: LED1
    name: "LED"

fan:
  - platform: hbridge
    id: my_fan
    name: "petfeeder motor"
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    enable_pin: motor_enable
    decay_mode: slow   # slow decay mode (braking) or fast decay (coasting).

cover:
  - platform: template
    name: "Cover"
    id: my_cover
    open_action: 
      - lambda: |- 
          auto call1 = id(my_fan).turn_on();
          id(my_fan).direction = FanDirection::FORWARD; 
          call1.perform();
      - delay: 0.15s 
      - lambda: |- 
          auto call2 = id(my_fan).turn_off();
          call2.perform(); 
          id(cover_status) = 1;
      - deep_sleep.prevent: 
          id: deep_sleep_1
    close_action: 
      - lambda: |- 
          auto call1 = id(my_fan).turn_on();
          id(my_fan).direction = FanDirection::REVERSE; 
          call1.perform();
      - delay: 0.1s 
      - lambda: |- 
          auto call2 = id(my_fan).turn_off();
          call2.perform(); 

          id(cover_status) = 0;       
      - deep_sleep.allow: 
          id: deep_sleep_1  

button:
  - platform: template
    name: autopetfeeder_sleep
    id: sleep_button
    on_press: 
      then:
        - lambda: |- 
            if(id(cover_status) == 1) { 
              auto call = id(my_cover).make_call();
              call.set_command_close();
              call.perform();   
            }      
