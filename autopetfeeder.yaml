esphome:
  name: autopetfeeder
  friendly_name: autopetfeeder

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "GENERATED_BY_ESPHOME"

ota:
  password: "GENERATED_BY_ESPHOME"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.0.88
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.0.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Autopetfeeder Fallback Hotspot"
    password: "GENERATED_BY_ESPHOME"

captive_portal:
    
deep_sleep:
  id: deep_sleep_1
  run_duration: 
    default: 120s
    gpio_wakeup_reason: 30s
  wakeup_pin_mode: 
    KEEP_AWAKE 
  sleep_duration: 1440min  # cannot omit 
  wakeup_pin: GPIO4
  #wakeup_pin_mode: INVERT_WAKEUP

globals:
- id: cover_nomovement_count 
  type: int 
  initial_value: "0" 
- id: cover_movement_count
  type: int 
  initial_value: "0" 
- id: cover_status
  type: int 
  initial_value: "0"   

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO3
    echo_pin: GPIO5
    update_interval: 1s
    name: "Ultrasonic Sensor"
    id: ultrasonic_distance
    timeout: 4m
    force_update: true
    filters: 
      - lambda: |- 
          if (isnan(x)) { return 4.0; } return x; 
    on_value:
      - lambda: |-
          if(x < 0.85) {
            if(id(cover_status) == 0) {
              id(cover_status) = 1;
              id(my_cover).open();   
            } 
          } else {
            // 45 times detection
            id(cover_nomovement_count) += 1;  
            ESP_LOGD("lambda", "count %d", id(cover_nomovement_count));  
            if(id(cover_nomovement_count) > 44) {
              id(cover_nomovement_count) = 0;      
              // cover is open 
              if(id(cover_status) == 1) {
                id(cover_status) = 0;    
                id(my_cover).close();            
              }          
            }
          }
  - platform: template 
    name: "nomovement count"
    lambda: |- 
      return id(cover_nomovement_count); 
    update_interval: 1s
  - platform: adc
    pin: GPIO2 # D0 
    name: "autopetfeeder"
    raw: true 
    attenuation: 11dB
    update_interval: 2s    
    filters:
      - multiply: 0.0014652014652015  
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12

binary_sensor:
  - platform: gpio
    pin: GPIO4
    name: "PIR Sensor"
    device_class: motion    
  - platform: template 
    name: "cover status"
    lambda: |- 
      if(id(cover_status) == 0) {
        return false; 
      } else {
        return true; 
      }
output:
  - platform: ledc
    id: motor_forward_pin
    pin: GPIO9 
  - platform: ledc
    id: motor_reverse_pin
    pin: GPIO8 
  - platform: ledc 
    id: motor_enable 
    pin: GPIO10
  - platform: ledc
    pin: GPIO20
    id: gpio_d7    

light:
  - platform: monochromatic
    output: gpio_d7
    id: LED1
    name: "LED"

fan:
  - platform: hbridge
    id: my_fan
    name: "petfeeder motor"
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    enable_pin: motor_enable
    decay_mode: slow   # slow decay mode (braking) or fast decay (coasting).

cover:
  - platform: template
    name: "Cover"
    id: my_cover
    open_action: 
      - lambda: |- 
          auto call1 = id(my_fan).turn_on();
          id(my_fan).direction = FanDirection::FORWARD; 
          call1.perform();
      - delay: 0.15s 
      - lambda: |- 
          auto call2 = id(my_fan).turn_off();
          call2.perform(); 
          id(cover_status) = 1;
      - deep_sleep.prevent: 
          id: deep_sleep_1
    close_action: 
      - lambda: |- 
          auto call1 = id(my_fan).turn_on();
          id(my_fan).direction = FanDirection::REVERSE; 
          call1.perform();
      - delay: 0.1s 
      - lambda: |- 
          auto call2 = id(my_fan).turn_off();
          call2.perform(); 
          id(cover_status) = 0;
      - deep_sleep.enter: 
          id: deep_sleep_1  

button:
  - platform: template
    name: autopetfeeder_sleep
    id: sleep_button
    on_press: 
      then:
        - lambda: |- 
            if(id(cover_status) == 1) { 
              id(my_cover).close(); 
            }       
